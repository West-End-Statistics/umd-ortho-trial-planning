---
title: "Initial Simulations for Fracture Trial"
format: 
  html:
    embed-resources: true
code-fold: true
---

```{r}
#| output: false
library(dplyr)
library(ggplot2)
library(BuyseTest)

prob2odds <- function(p, logodds = TRUE) {
  out <- p / (1 - p)
  if (logodds) {
    log(out)
  } else {
    out
  }
}

odds2prob <- function(x) {
  x / (1 + x)
}

logodds2prob <- function(x) {
  x <- exp(x)
  odds2prob(x)
}
```

## Introduction

This document summarizes the power for detecting the effect of an intervention on post fracture recovery. The first round of simulations looks at how much correlation between different endpoint may alter the power of a win ratio based test. It additionally explores the difference in power from looking at the individual outcomes vs what is possible with the win ratio test.

## Data Simulation

### Outcomes

1.  All Cause Mortality

Mortality is modeled as a binary variable, with 15% in the placebo group and 10% in the treatment group.

```{r}
placebo_alive_rate <- .85
treat_alive_rate <- .9
placebo_log_odds <- prob2odds(placebo_alive_rate, logodds = TRUE)
treat_log_odds <- prob2odds(treat_alive_rate, logodds = TRUE)
```

2.  Days at home within 4 months

Days at home is modeled as a normal variable with a minimum of 1 day and maximum of 121 (approximately 4 months). A standard deviation of 20 is used and an average of 67 is used for placebo/78 for the treatment arm.

```{r}

max_days <- ceiling(4 * 30.25)
min_days <- 1

placebo_d_at_home <- 67
treatment_d_at_home <- 78

d_at_home_overall_sd <- 20
```

3.  Ambulation at 4 months

Ambulation at 4 months is modeled as a normal variable that is then broken up into four different categories. The different treatment arms use different cutoffs based on the predefined percentages.

The cutoffs differ depending on if the subject is treated with placebo or active treatment. For example, the graph below shows how a normal variable is split into the appropriate categories. The re is a little variation because of random sampling, but you can see that the walk with human assistance category is visibly larger in the placebo group.

```{r}
get_amb_status <- function(x, arm = c("placebo", "active")) {
  treatment_cutoffs <- qnorm(
    cumsum(c(.05, .25, .41))
  )
  placebo_cutoffs <- qnorm(
    cumsum(c(.07, .37, .34))
  )
  if (arm == "placebo") {
    cut_to_use <- placebo_cutoffs
  } else {
    cut_to_use <- treatment_cutoffs
  }
  cut(x,
    c(-Inf, cut_to_use, Inf),
    labels = c(
      "unable to walk",
      "walk with human assistance",
      "walk with aid",
      "walk without assistance"
    )
  )
}
```

```{r}

latent_variable <- rnorm(10000)
placebo_status <- get_amb_status(latent_variable, arm = "placebo")
active_status <- get_amb_status(latent_variable, arm = "active")

rbind(
  data.frame(latent_variable, amb_4_months = placebo_status, arm = "placebo"),
  data.frame(latent_variable, amb_4_months = active_status, arm = "active")
) |>
  ggplot(aes(x = latent_variable, fill = amb_4_months)) +
  geom_histogram(binwidth = .03) +
  facet_grid(arm ~ .) +
  labs(x = "")

```

### Correlate Outcomes and Simulate

A transformed multivariate normal distribution was used to create correlation among the three different outcome. However, since mortality is a binary outcome, the result of the normal draws was used as a log odds estimate for the true rate.

```{r}
simulate_data <- function(n, arm = c("placebo", "active"), outcome_correlation = 0) {
  arm <- match.arg(arm)

  # set up covariance matrix
  # .3 means that there is some variance in rates, but it does not effect
  # the average rate too much. Higher variances drive the base rate up - probably because
  #
  sds <- matrix(c(.3, 20, 1), ncol = 1)
  covar <- sds %*% t(sds)
  non_diag_sel <- lower.tri(covar) | upper.tri(covar)
  covar[non_diag_sel] <- covar[non_diag_sel] * outcome_correlation
  if (arm == "placebo") {
    log_odds_surv <- prob2odds(.85)
    d_at_home <- 67
  } else {
    log_odds_surv <- prob2odds(.9)
    d_at_home <- 78
  }

  underlying_data <- mvtnorm::rmvnorm(
    n = n,
    c(
      log_odds_surv,
      d_at_home,
      0
    ),
    covar
  )

  out <- data.frame(
    died = rbinom(n = n, size = 1, prob = 1 - logodds2prob(underlying_data[, 1])),
    days_at_home = round(pmax(pmin(underlying_data[, 2], 121), 1)),
    ambulation_status = get_amb_status(underlying_data[, 3], arm)
  )

  out$amb_status_numeric <- as.numeric(out$ambulation_status)
  out
}

# The following function creates a full trial with both arms
simulate_trial <- function(n_per_arm, outcome_correlation = 0) {
  out <- dplyr::bind_rows(
    placebo = simulate_data(n_per_arm, arm = "placebo", outcome_correlation = outcome_correlation),
    active = simulate_data(n_per_arm, arm = "active", outcome_correlation = outcome_correlation),
    .id = "arm"
  )

  out$arm <- factor(out$arm, c("placebo", "active"))
  out
}

```

### Example Data Observed Properties

The table below shows that the observed outcomes in both an uncorrelated and highly correlated example data set have similar properties and are in line with the prespecified definitions

```{r}
set.seed(20240515)
trial_no_corr <- simulate_trial(10000, outcome_correlation = 0)
trial_hi_corr <- simulate_trial(10000, outcome_correlation = .9)
d_no_corr <- simulate_data(10000, outcome_correlation = 0)
d_hi_corr <- simulate_data(10000, outcome_correlation = .9)

make_summary_tbl <- function(d) {
  gtsummary::tbl_summary(d,
    statistic = list(
      gtsummary::all_continuous() ~ "{mean} ({sd})",
      gtsummary::all_categorical() ~ "{n} ({p}%)"
    ),
    by = "arm",
    include = -amb_status_numeric
  ) |> gtsummary::add_stat_label()
}

gtsummary::tbl_merge(
  list(
    make_summary_tbl(trial_no_corr),
    make_summary_tbl(trial_hi_corr)
  ),
  tab_spanner = c("No Correlation", "High Correlation")
)
```

The following shows the correlation matrix when no correlation is present.

```{r}
d_no_corr[, c("died", "days_at_home", "amb_status_numeric")] |>
  cor(method = "spearman")
```

This contrasts with the high correlation example where the non-diagonal entries of the correlation matrix are not equal to 0. The correlation between a binary and continuous variable is harder to capture so is much lower than the target (.9).

```{r}
d_hi_corr[, c("died", "days_at_home", "amb_status_numeric")] |>
  cor(method = "spearman")
```

### Example Data

The output below shows a hypothetical trial with 75 subjects per arm:

```{r}
set.seed(2024051)
no_corr_simple_trial <- simulate_trial(n = 75, outcome_correlation = 0)
make_summary_tbl(no_corr_simple_trial)
bt_out <- BuyseTest(
  arm ~ bin(died, operator = "<0") +
    cont(amb_status_numeric, threshold = 1) +
    cont(days_at_home, threshold = 2),
  method.inference = "u-statistic",
  trace = 0,
  data = no_corr_simple_trial
)
summary(bt_out, statistic = "winRatio")
```

The result above shows that there is an overall improvement in the active arm. The last p.value for days at home (.001) is the overall p.value.

The following code shows how each of the three outcomes would be evaluated individually.

1.  Mortality (Logistic Regression)

```{r}
glm(died ~ arm, data = no_corr_simple_trial, family = "binomial") |>
  broom::tidy() |>
  subset(term == "armactive")
```

2.  Ambulation Status (Ordinal Regression)

```{r}
MASS::polr(ambulation_status ~ arm, data = no_corr_simple_trial, Hess = TRUE) |>
  broom::tidy(p.values = TRUE) |>
  subset(term == "armactive")
```

3.  Days at home (t test)

```{r}
lm(days_at_home ~ arm, data = no_corr_simple_trial) |>
  broom::tidy() |>
  subset(term == "armactive")
```

## Evaluating Power

Power will be evaluated for a trial with 75 subjects per arm, and correlations between none, medium (.5) and high (.9). Power was calculated for the winratio test and the individual components with alpha = .05 and 1000 simulations.

```{r}
evaluate_dataset <- function(d, alpha = .05) {
  bt_out <- BuyseTest(
    arm ~ bin(died, operator = "<0") +
      cont(amb_status_numeric, threshold = 1) +
      cont(days_at_home, threshold = 1),
    method.inference = "u-statistic",
    trace = 0,
    data = d
  )
  winratio_out <- tibble::as_tibble(confint(bt_out, statistic = "winRatio"), rownames = "term")


  winratio_summary <- winratio_out |>
    subset(term == "days_at_home_t1")

  winratio_win <- winratio_summary$estimate > 1 && winratio_summary$p.value < alpha

  death_summary <- glm(died ~ arm, data = d, family = "binomial") |>
    broom::tidy() |>
    subset(term == "armactive")

  death_win <- death_summary$estimate < 0 && death_summary$p.value < alpha

  amb_status_summary <- MASS::polr(ambulation_status ~ arm,
    data = d,
    Hess = TRUE
  ) |>
    broom::tidy(p.values = TRUE) |>
    subset(term == "armactive")
  amb_status_win <- amb_status_summary$estimate > 0 && amb_status_summary$p.value < alpha

  days_summary <- lm(days_at_home ~ arm, data = d) |>
    broom::tidy() |>
    subset(term == "armactive")

  days_win <- days_summary$estimate > 0 && days_summary$p.value < alpha
  data.frame(
    winratio = winratio_win,
    death = death_win,
    amb_status = amb_status_win,
    days = days_win
  )
}
```

```{r}
num_sims <- 1000
num_pats <- 75


params <- tidyr::crossing(
  sim_num = 1:num_sims,
  correlation = c(0, .5, .9)
)
```

```{r}
#| cache: true
set.seed(20240512)
sim_results <- purrr::map(params$correlation, function(.corr) {
  d <- simulate_trial(num_pats, .corr)
  evaluate_dataset(d)
}) |> purrr::list_rbind()

sim_results <- cbind(params, sim_results)
```

The final power for each outcome and correlation structure is shown below:

```{r}
sim_results |>
  group_by(correlation) |>
  summarise(across(winratio:days, mean))
```

```{r}
# Monte Carlo Standard error (TODO)
# boot::boot(sim_results, function(data, inds) {
#
#  colMeans()
# })
```

Further exploration is needed to understand these results but overall:

1.  Correlation does not seem to place a large part in the power calculations for win ratio. Originally I thought a higher correlation would lower power, but it seems to be at a minimum when correlation is .5. It's possibly driven by a drop in power in ambulation status - although

2.  Correlation should not effect power on individual endpoints.

3.  Even though days at home appears best powered, it may not be enough to be a primary endpoint.

## Limitations

While correlation is modeled between outcomes, the specific relationships have not been taken into account. For example, if a subject dies on day 30, they can at most have 30 days at home. The specific causal paths between outcomes has also not been taken into account (non ambulation can raise likelihood of death).